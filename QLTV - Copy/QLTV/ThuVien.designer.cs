#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QLTV
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QLSACH")]
	public partial class ThuVienDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCuonSach(CuonSach instance);
    partial void UpdateCuonSach(CuonSach instance);
    partial void DeleteCuonSach(CuonSach instance);
    partial void InsertTacGia(TacGia instance);
    partial void UpdateTacGia(TacGia instance);
    partial void DeleteTacGia(TacGia instance);
    partial void InsertDausach(Dausach instance);
    partial void UpdateDausach(Dausach instance);
    partial void DeleteDausach(Dausach instance);
    partial void InsertDocGia(DocGia instance);
    partial void UpdateDocGia(DocGia instance);
    partial void DeleteDocGia(DocGia instance);
    partial void InsertMuon(Muon instance);
    partial void UpdateMuon(Muon instance);
    partial void DeleteMuon(Muon instance);
    partial void InsertNXB(NXB instance);
    partial void UpdateNXB(NXB instance);
    partial void DeleteNXB(NXB instance);
    #endregion
		
		public ThuVienDataContext() : 
				base(global::QLTV.Properties.Settings.Default.QLSACHConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ThuVienDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ThuVienDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ThuVienDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ThuVienDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CuonSach> CuonSaches
		{
			get
			{
				return this.GetTable<CuonSach>();
			}
		}
		
		public System.Data.Linq.Table<TacGia> TacGias
		{
			get
			{
				return this.GetTable<TacGia>();
			}
		}
		
		public System.Data.Linq.Table<Dausach> Dausaches
		{
			get
			{
				return this.GetTable<Dausach>();
			}
		}
		
		public System.Data.Linq.Table<DocGia> DocGias
		{
			get
			{
				return this.GetTable<DocGia>();
			}
		}
		
		public System.Data.Linq.Table<Muon> Muons
		{
			get
			{
				return this.GetTable<Muon>();
			}
		}
		
		public System.Data.Linq.Table<NXB> NXBs
		{
			get
			{
				return this.GetTable<NXB>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CuonSach")]
	public partial class CuonSach : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MaSach;
		
		private string _MaCuon;
		
		private string _ViTri;
		
		private EntitySet<Muon> _Muons;
		
		private EntityRef<Dausach> _Dausach;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaSachChanging(string value);
    partial void OnMaSachChanged();
    partial void OnMaCuonChanging(string value);
    partial void OnMaCuonChanged();
    partial void OnViTriChanging(string value);
    partial void OnViTriChanged();
    #endregion
		
		public CuonSach()
		{
			this._Muons = new EntitySet<Muon>(new Action<Muon>(this.attach_Muons), new Action<Muon>(this.detach_Muons));
			this._Dausach = default(EntityRef<Dausach>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaSach", DbType="NChar(2)")]
		public string MaSach
		{
			get
			{
				return this._MaSach;
			}
			set
			{
				if ((this._MaSach != value))
				{
					if (this._Dausach.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaSachChanging(value);
					this.SendPropertyChanging();
					this._MaSach = value;
					this.SendPropertyChanged("MaSach");
					this.OnMaSachChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaCuon", DbType="NChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MaCuon
		{
			get
			{
				return this._MaCuon;
			}
			set
			{
				if ((this._MaCuon != value))
				{
					this.OnMaCuonChanging(value);
					this.SendPropertyChanging();
					this._MaCuon = value;
					this.SendPropertyChanged("MaCuon");
					this.OnMaCuonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViTri", DbType="NVarChar(20)")]
		public string ViTri
		{
			get
			{
				return this._ViTri;
			}
			set
			{
				if ((this._ViTri != value))
				{
					this.OnViTriChanging(value);
					this.SendPropertyChanging();
					this._ViTri = value;
					this.SendPropertyChanged("ViTri");
					this.OnViTriChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CuonSach_Muon", Storage="_Muons", ThisKey="MaCuon", OtherKey="MaCuon")]
		public EntitySet<Muon> Muons
		{
			get
			{
				return this._Muons;
			}
			set
			{
				this._Muons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dausach_CuonSach", Storage="_Dausach", ThisKey="MaSach", OtherKey="Masach", IsForeignKey=true)]
		public Dausach Dausach
		{
			get
			{
				return this._Dausach.Entity;
			}
			set
			{
				Dausach previousValue = this._Dausach.Entity;
				if (((previousValue != value) 
							|| (this._Dausach.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dausach.Entity = null;
						previousValue.CuonSaches.Remove(this);
					}
					this._Dausach.Entity = value;
					if ((value != null))
					{
						value.CuonSaches.Add(this);
						this._MaSach = value.Masach;
					}
					else
					{
						this._MaSach = default(string);
					}
					this.SendPropertyChanged("Dausach");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Muons(Muon entity)
		{
			this.SendPropertyChanging();
			entity.CuonSach = this;
		}
		
		private void detach_Muons(Muon entity)
		{
			this.SendPropertyChanging();
			entity.CuonSach = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TacGia")]
	public partial class TacGia : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Masach;
		
		private string _TenTacGia;
		
		private EntityRef<Dausach> _Dausach;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMasachChanging(string value);
    partial void OnMasachChanged();
    partial void OnTenTacGiaChanging(string value);
    partial void OnTenTacGiaChanged();
    #endregion
		
		public TacGia()
		{
			this._Dausach = default(EntityRef<Dausach>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Masach", DbType="NChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Masach
		{
			get
			{
				return this._Masach;
			}
			set
			{
				if ((this._Masach != value))
				{
					if (this._Dausach.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMasachChanging(value);
					this.SendPropertyChanging();
					this._Masach = value;
					this.SendPropertyChanged("Masach");
					this.OnMasachChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenTacGia", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TenTacGia
		{
			get
			{
				return this._TenTacGia;
			}
			set
			{
				if ((this._TenTacGia != value))
				{
					this.OnTenTacGiaChanging(value);
					this.SendPropertyChanging();
					this._TenTacGia = value;
					this.SendPropertyChanged("TenTacGia");
					this.OnTenTacGiaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dausach_TacGia", Storage="_Dausach", ThisKey="Masach", OtherKey="Masach", IsForeignKey=true)]
		public Dausach Dausach
		{
			get
			{
				return this._Dausach.Entity;
			}
			set
			{
				Dausach previousValue = this._Dausach.Entity;
				if (((previousValue != value) 
							|| (this._Dausach.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dausach.Entity = null;
						previousValue.TacGias.Remove(this);
					}
					this._Dausach.Entity = value;
					if ((value != null))
					{
						value.TacGias.Add(this);
						this._Masach = value.Masach;
					}
					else
					{
						this._Masach = default(string);
					}
					this.SendPropertyChanged("Dausach");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dausach")]
	public partial class Dausach : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Masach;
		
		private string _Tua;
		
		private string _MaNXB;
		
		private EntitySet<CuonSach> _CuonSaches;
		
		private EntitySet<TacGia> _TacGias;
		
		private EntityRef<NXB> _NXB;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMasachChanging(string value);
    partial void OnMasachChanged();
    partial void OnTuaChanging(string value);
    partial void OnTuaChanged();
    partial void OnMaNXBChanging(string value);
    partial void OnMaNXBChanged();
    #endregion
		
		public Dausach()
		{
			this._CuonSaches = new EntitySet<CuonSach>(new Action<CuonSach>(this.attach_CuonSaches), new Action<CuonSach>(this.detach_CuonSaches));
			this._TacGias = new EntitySet<TacGia>(new Action<TacGia>(this.attach_TacGias), new Action<TacGia>(this.detach_TacGias));
			this._NXB = default(EntityRef<NXB>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Masach", DbType="NChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Masach
		{
			get
			{
				return this._Masach;
			}
			set
			{
				if ((this._Masach != value))
				{
					this.OnMasachChanging(value);
					this.SendPropertyChanging();
					this._Masach = value;
					this.SendPropertyChanged("Masach");
					this.OnMasachChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tua", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Tua
		{
			get
			{
				return this._Tua;
			}
			set
			{
				if ((this._Tua != value))
				{
					this.OnTuaChanging(value);
					this.SendPropertyChanging();
					this._Tua = value;
					this.SendPropertyChanged("Tua");
					this.OnTuaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaNXB", DbType="NChar(3) NOT NULL", CanBeNull=false)]
		public string MaNXB
		{
			get
			{
				return this._MaNXB;
			}
			set
			{
				if ((this._MaNXB != value))
				{
					if (this._NXB.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaNXBChanging(value);
					this.SendPropertyChanging();
					this._MaNXB = value;
					this.SendPropertyChanged("MaNXB");
					this.OnMaNXBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dausach_CuonSach", Storage="_CuonSaches", ThisKey="Masach", OtherKey="MaSach")]
		public EntitySet<CuonSach> CuonSaches
		{
			get
			{
				return this._CuonSaches;
			}
			set
			{
				this._CuonSaches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dausach_TacGia", Storage="_TacGias", ThisKey="Masach", OtherKey="Masach")]
		public EntitySet<TacGia> TacGias
		{
			get
			{
				return this._TacGias;
			}
			set
			{
				this._TacGias.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NXB_Dausach", Storage="_NXB", ThisKey="MaNXB", OtherKey="MaNXB", IsForeignKey=true)]
		public NXB NXB
		{
			get
			{
				return this._NXB.Entity;
			}
			set
			{
				NXB previousValue = this._NXB.Entity;
				if (((previousValue != value) 
							|| (this._NXB.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NXB.Entity = null;
						previousValue.Dausaches.Remove(this);
					}
					this._NXB.Entity = value;
					if ((value != null))
					{
						value.Dausaches.Add(this);
						this._MaNXB = value.MaNXB;
					}
					else
					{
						this._MaNXB = default(string);
					}
					this.SendPropertyChanged("NXB");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CuonSaches(CuonSach entity)
		{
			this.SendPropertyChanging();
			entity.Dausach = this;
		}
		
		private void detach_CuonSaches(CuonSach entity)
		{
			this.SendPropertyChanging();
			entity.Dausach = null;
		}
		
		private void attach_TacGias(TacGia entity)
		{
			this.SendPropertyChanging();
			entity.Dausach = this;
		}
		
		private void detach_TacGias(TacGia entity)
		{
			this.SendPropertyChanging();
			entity.Dausach = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DocGia")]
	public partial class DocGia : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MaDG;
		
		private string _TenDG;
		
		private string _DiaChi;
		
		private string _SoDT;
		
		private EntitySet<Muon> _Muons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaDGChanging(string value);
    partial void OnMaDGChanged();
    partial void OnTenDGChanging(string value);
    partial void OnTenDGChanged();
    partial void OnDiaChiChanging(string value);
    partial void OnDiaChiChanged();
    partial void OnSoDTChanging(string value);
    partial void OnSoDTChanged();
    #endregion
		
		public DocGia()
		{
			this._Muons = new EntitySet<Muon>(new Action<Muon>(this.attach_Muons), new Action<Muon>(this.detach_Muons));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaDG", DbType="NChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MaDG
		{
			get
			{
				return this._MaDG;
			}
			set
			{
				if ((this._MaDG != value))
				{
					this.OnMaDGChanging(value);
					this.SendPropertyChanging();
					this._MaDG = value;
					this.SendPropertyChanged("MaDG");
					this.OnMaDGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenDG", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string TenDG
		{
			get
			{
				return this._TenDG;
			}
			set
			{
				if ((this._TenDG != value))
				{
					this.OnTenDGChanging(value);
					this.SendPropertyChanging();
					this._TenDG = value;
					this.SendPropertyChanged("TenDG");
					this.OnTenDGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiaChi", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
		public string DiaChi
		{
			get
			{
				return this._DiaChi;
			}
			set
			{
				if ((this._DiaChi != value))
				{
					this.OnDiaChiChanging(value);
					this.SendPropertyChanging();
					this._DiaChi = value;
					this.SendPropertyChanged("DiaChi");
					this.OnDiaChiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoDT", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
		public string SoDT
		{
			get
			{
				return this._SoDT;
			}
			set
			{
				if ((this._SoDT != value))
				{
					this.OnSoDTChanging(value);
					this.SendPropertyChanging();
					this._SoDT = value;
					this.SendPropertyChanged("SoDT");
					this.OnSoDTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocGia_Muon", Storage="_Muons", ThisKey="MaDG", OtherKey="MaDG")]
		public EntitySet<Muon> Muons
		{
			get
			{
				return this._Muons;
			}
			set
			{
				this._Muons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Muons(Muon entity)
		{
			this.SendPropertyChanging();
			entity.DocGia = this;
		}
		
		private void detach_Muons(Muon entity)
		{
			this.SendPropertyChanging();
			entity.DocGia = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Muon")]
	public partial class Muon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MaCuon;
		
		private string _MaDG;
		
		private string _NgayMuon;
		
		private string _NgayTra;
		
		private EntityRef<CuonSach> _CuonSach;
		
		private EntityRef<DocGia> _DocGia;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaCuonChanging(string value);
    partial void OnMaCuonChanged();
    partial void OnMaDGChanging(string value);
    partial void OnMaDGChanged();
    partial void OnNgayMuonChanging(string value);
    partial void OnNgayMuonChanged();
    partial void OnNgayTraChanging(string value);
    partial void OnNgayTraChanged();
    #endregion
		
		public Muon()
		{
			this._CuonSach = default(EntityRef<CuonSach>);
			this._DocGia = default(EntityRef<DocGia>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaCuon", DbType="NChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MaCuon
		{
			get
			{
				return this._MaCuon;
			}
			set
			{
				if ((this._MaCuon != value))
				{
					if (this._CuonSach.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaCuonChanging(value);
					this.SendPropertyChanging();
					this._MaCuon = value;
					this.SendPropertyChanged("MaCuon");
					this.OnMaCuonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaDG", DbType="NChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MaDG
		{
			get
			{
				return this._MaDG;
			}
			set
			{
				if ((this._MaDG != value))
				{
					if (this._DocGia.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaDGChanging(value);
					this.SendPropertyChanging();
					this._MaDG = value;
					this.SendPropertyChanged("MaDG");
					this.OnMaDGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NgayMuon", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string NgayMuon
		{
			get
			{
				return this._NgayMuon;
			}
			set
			{
				if ((this._NgayMuon != value))
				{
					this.OnNgayMuonChanging(value);
					this.SendPropertyChanging();
					this._NgayMuon = value;
					this.SendPropertyChanged("NgayMuon");
					this.OnNgayMuonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NgayTra", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string NgayTra
		{
			get
			{
				return this._NgayTra;
			}
			set
			{
				if ((this._NgayTra != value))
				{
					this.OnNgayTraChanging(value);
					this.SendPropertyChanging();
					this._NgayTra = value;
					this.SendPropertyChanged("NgayTra");
					this.OnNgayTraChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CuonSach_Muon", Storage="_CuonSach", ThisKey="MaCuon", OtherKey="MaCuon", IsForeignKey=true)]
		public CuonSach CuonSach
		{
			get
			{
				return this._CuonSach.Entity;
			}
			set
			{
				CuonSach previousValue = this._CuonSach.Entity;
				if (((previousValue != value) 
							|| (this._CuonSach.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CuonSach.Entity = null;
						previousValue.Muons.Remove(this);
					}
					this._CuonSach.Entity = value;
					if ((value != null))
					{
						value.Muons.Add(this);
						this._MaCuon = value.MaCuon;
					}
					else
					{
						this._MaCuon = default(string);
					}
					this.SendPropertyChanged("CuonSach");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DocGia_Muon", Storage="_DocGia", ThisKey="MaDG", OtherKey="MaDG", IsForeignKey=true)]
		public DocGia DocGia
		{
			get
			{
				return this._DocGia.Entity;
			}
			set
			{
				DocGia previousValue = this._DocGia.Entity;
				if (((previousValue != value) 
							|| (this._DocGia.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DocGia.Entity = null;
						previousValue.Muons.Remove(this);
					}
					this._DocGia.Entity = value;
					if ((value != null))
					{
						value.Muons.Add(this);
						this._MaDG = value.MaDG;
					}
					else
					{
						this._MaDG = default(string);
					}
					this.SendPropertyChanged("DocGia");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NXB")]
	public partial class NXB : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MaNXB;
		
		private string _TenNXB;
		
		private string _DiaChi;
		
		private string _SoDT;
		
		private EntitySet<Dausach> _Dausaches;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaNXBChanging(string value);
    partial void OnMaNXBChanged();
    partial void OnTenNXBChanging(string value);
    partial void OnTenNXBChanged();
    partial void OnDiaChiChanging(string value);
    partial void OnDiaChiChanged();
    partial void OnSoDTChanging(string value);
    partial void OnSoDTChanged();
    #endregion
		
		public NXB()
		{
			this._Dausaches = new EntitySet<Dausach>(new Action<Dausach>(this.attach_Dausaches), new Action<Dausach>(this.detach_Dausaches));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaNXB", DbType="NChar(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MaNXB
		{
			get
			{
				return this._MaNXB;
			}
			set
			{
				if ((this._MaNXB != value))
				{
					this.OnMaNXBChanging(value);
					this.SendPropertyChanging();
					this._MaNXB = value;
					this.SendPropertyChanged("MaNXB");
					this.OnMaNXBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenNXB", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string TenNXB
		{
			get
			{
				return this._TenNXB;
			}
			set
			{
				if ((this._TenNXB != value))
				{
					this.OnTenNXBChanging(value);
					this.SendPropertyChanging();
					this._TenNXB = value;
					this.SendPropertyChanged("TenNXB");
					this.OnTenNXBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiaChi", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string DiaChi
		{
			get
			{
				return this._DiaChi;
			}
			set
			{
				if ((this._DiaChi != value))
				{
					this.OnDiaChiChanging(value);
					this.SendPropertyChanging();
					this._DiaChi = value;
					this.SendPropertyChanged("DiaChi");
					this.OnDiaChiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoDT", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
		public string SoDT
		{
			get
			{
				return this._SoDT;
			}
			set
			{
				if ((this._SoDT != value))
				{
					this.OnSoDTChanging(value);
					this.SendPropertyChanging();
					this._SoDT = value;
					this.SendPropertyChanged("SoDT");
					this.OnSoDTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NXB_Dausach", Storage="_Dausaches", ThisKey="MaNXB", OtherKey="MaNXB")]
		public EntitySet<Dausach> Dausaches
		{
			get
			{
				return this._Dausaches;
			}
			set
			{
				this._Dausaches.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Dausaches(Dausach entity)
		{
			this.SendPropertyChanging();
			entity.NXB = this;
		}
		
		private void detach_Dausaches(Dausach entity)
		{
			this.SendPropertyChanging();
			entity.NXB = null;
		}
	}
}
#pragma warning restore 1591
